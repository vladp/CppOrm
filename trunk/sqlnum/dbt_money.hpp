#ifndef DBT_MONEY_HPP
#define DBT_MONEY_HPP


/* 
		
  There is no explicit license for this file
  Only thing I ask is keep the names of the 
  author/contributors in this file


  Author: Vladislav Papayan
  Contributors:



  Change History:
          6-10-09  vpapayan  Pulled out of my private archives for initial checking 

	$id$


  Purpose:
   
   Definitions of cmoney_t class

 $id$
*/





#include <boost/operators.hpp>
#include "orm_config.hpp"




/*  Thanks to IBM, now we can finally have a high performance *MONEY*
class in C++ for all those sophisticated financial calculations
that people praise
cobol for (because cobol has the fixed arithmetic class) 
http://speleotrove.com/decimal/decnumber.html

I am providing just a basic C++ wrapper

*/

#define CMONEY_STR_MAXLEN 43

struct ORM_COMMON_API cmoney_impl_dtl;
struct ORM_COMMON_API cmoney_t
     // note: private inheritance is OK here!
    : boost::addable< cmoney_t          // money + money
    , boost::subtractable< cmoney_t     // money - money
    , boost::addable2< cmoney_t, int    // money / decimal64
    , boost::subtractable2< cmoney_t, int // money * dec64, dec64 * money    
    , boost::dividable< cmoney_t    // money / decimal64
    , boost::multipliable< cmoney_t  // money * dec64, dec64 * money
    , boost::dividable2< cmoney_t, int    // money / decimal64
    , boost::multipliable2< cmoney_t, int // money * dec64, dec64 * money
      > > > > > > > >

{
public:
    typedef  boost::shared_ptr<cmoney_impl_dtl> t_money_storage;
    
    //typedef  cmoney_impl_dtl* t_money_storage;
    
    cmoney_t (void);
    cmoney_t (const int& in);
    cmoney_t (const std::string& in);    
#ifndef BOOST_NO_STD_WSTRING
    cmoney_t (const std::wstring& in);  
#endif 
     
    cmoney_t (const t_money_storage& in);    
    cmoney_t (const cmoney_t& in);
    
    cmoney_t& operator=(const cmoney_t& );
    bool operator<(const cmoney_t& ) const;
    
    virtual ~cmoney_t();
    
    
    
    
    
    
    const t_money_storage& val() const;
    
    /*
    t_money_storage& val();
    operator t_money_storage ();
    */
    
    
    std::string as_str (void) const;
#ifndef BOOST_NO_STD_WSTRING
    std::wstring as_wstr (void) const;
#endif

    void  from_str (const std::string& );
#ifndef BOOST_NO_STD_WSTRING
    void  from_wstr (const std::wstring&);
#endif


    
    //friend functions need to be inline
    friend
    std::ostream& operator<<(std::ostream& o, const cmoney_t& m)
    {
      o<<m.as_str();
      return o;
    }
    
    //friend functions need to be inline
#ifndef BOOST_NO_STD_WSTRING
    friend
    std::wostream& operator<<(std::wostream& o,const cmoney_t& m)
    {
      o<<m.as_wstr();
      return o;
    }
#endif
        
      

    friend
    std::istream& operator>>(std::istream& o,  cmoney_t& m)
    {
      std::string tmp;
      o>>tmp;
      if (o.good())
      {
         m.from_str(tmp);
      }  
      return o;
    }
    
#ifndef BOOST_NO_STD_WSTRING
    //friend functions need to be inline
    friend
    std::wistream& operator>>(std::wistream& o, cmoney_t& m)
    {
      std::wstring tmp;
      o>>tmp;
      if (o.good())
      {
         m.from_wstr(tmp);
      }  
      return o;
    }
#endif





    cmoney_t& operator+=(const cmoney_t&);
    
    cmoney_t& operator+=(const int&);
    // cmoney_t operator+(cmoney_t, const cmoney_t&) automatically
    // generated by addable.

    cmoney_t& operator-=(const cmoney_t&);
    
    cmoney_t& operator-=(const int&);
    // cmoney_t operator-(cmoney_t, const cmoney_t&) automatically
    // generated by subtractable.

    cmoney_t& operator*=(const cmoney_t&);
    
    cmoney_t& operator*=(const int& );
    // cmoney_t operator*(cmoney_t, const T&) and
    // cmoney_t operator*(const t_money_storage&, cmoney_t) auto-generated
    // by multipliable.

    cmoney_t& operator/=(const cmoney_t& );
    
    cmoney_t& operator/=(const int&);
    // cmoney_t operator/(cmoney_t, const t_money_storage&) auto-generated
    // by dividable.
private:
      //pointer to storage implementation
    t_money_storage v;

};





#endif
